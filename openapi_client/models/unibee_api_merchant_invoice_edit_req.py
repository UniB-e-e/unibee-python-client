# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.unibee_api_merchant_invoice_new_invoice_item_param import UnibeeApiMerchantInvoiceNewInvoiceItemParam
from typing import Optional, Set
from typing_extensions import Self

class UnibeeApiMerchantInvoiceEditReq(BaseModel):
    """
    UnibeeApiMerchantInvoiceEditReq
    """ # noqa: E501
    currency: Optional[StrictStr] = Field(default=None, description="Currency")
    finish: Optional[StrictBool] = None
    gateway_id: Optional[StrictInt] = Field(default=None, description="Gateway Id", alias="gatewayId")
    invoice_id: StrictStr = Field(description="InvoiceId", alias="invoiceId")
    lines: Optional[List[UnibeeApiMerchantInvoiceNewInvoiceItemParam]] = None
    name: Optional[StrictStr] = Field(default=None, description="Name")
    tax_scale: Optional[StrictInt] = Field(default=None, description="TaxScaleï¼Œ1000 represent 10%", alias="taxScale")
    __properties: ClassVar[List[str]] = ["currency", "finish", "gatewayId", "invoiceId", "lines", "name", "taxScale"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeApiMerchantInvoiceEditReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        _items = []
        if self.lines:
            for _item in self.lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lines'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeApiMerchantInvoiceEditReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currency": obj.get("currency"),
            "finish": obj.get("finish"),
            "gatewayId": obj.get("gatewayId"),
            "invoiceId": obj.get("invoiceId"),
            "lines": [UnibeeApiMerchantInvoiceNewInvoiceItemParam.from_dict(_item) for _item in obj["lines"]] if obj.get("lines") is not None else None,
            "name": obj.get("name"),
            "taxScale": obj.get("taxScale")
        })
        return _obj


