# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UnibeeApiBeanRefundSimplify(BaseModel):
    """
    UnibeeApiBeanRefundSimplify
    """ # noqa: E501
    country_code: Optional[StrictStr] = Field(default=None, description="country code", alias="countryCode")
    create_time: Optional[StrictInt] = Field(default=None, description="create utc time", alias="createTime")
    currency: Optional[StrictStr] = Field(default=None, description="currency")
    external_refund_id: Optional[StrictStr] = Field(default=None, description="external_refund_id", alias="externalRefundId")
    gateway_id: Optional[StrictInt] = Field(default=None, description="gateway_id", alias="gatewayId")
    gateway_refund_id: Optional[StrictStr] = Field(default=None, description="gateway refund id", alias="gatewayRefundId")
    merchant_id: Optional[StrictInt] = Field(default=None, description="merchant id", alias="merchantId")
    metadata: Optional[Dict[str, StrictStr]] = None
    payment_id: Optional[StrictStr] = Field(default=None, description="relative payment id", alias="paymentId")
    refund_amount: Optional[StrictInt] = Field(default=None, description="refund amount, cent", alias="refundAmount")
    refund_comment: Optional[StrictStr] = Field(default=None, description="refund comment", alias="refundComment")
    refund_id: Optional[StrictStr] = Field(default=None, description="refund id (system generate)", alias="refundId")
    refund_time: Optional[StrictInt] = Field(default=None, description="refund success time", alias="refundTime")
    return_url: Optional[StrictStr] = Field(default=None, description="return url after refund success", alias="returnUrl")
    status: Optional[StrictInt] = Field(default=None, description="status。10-pending，20-success，30-failure, 40-cancel")
    subscription_id: Optional[StrictStr] = Field(default=None, description="subscription id", alias="subscriptionId")
    user_id: Optional[StrictInt] = Field(default=None, description="user_id", alias="userId")
    __properties: ClassVar[List[str]] = ["countryCode", "createTime", "currency", "externalRefundId", "gatewayId", "gatewayRefundId", "merchantId", "metadata", "paymentId", "refundAmount", "refundComment", "refundId", "refundTime", "returnUrl", "status", "subscriptionId", "userId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeApiBeanRefundSimplify from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeApiBeanRefundSimplify from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "countryCode": obj.get("countryCode"),
            "createTime": obj.get("createTime"),
            "currency": obj.get("currency"),
            "externalRefundId": obj.get("externalRefundId"),
            "gatewayId": obj.get("gatewayId"),
            "gatewayRefundId": obj.get("gatewayRefundId"),
            "merchantId": obj.get("merchantId"),
            "metadata": obj.get("metadata"),
            "paymentId": obj.get("paymentId"),
            "refundAmount": obj.get("refundAmount"),
            "refundComment": obj.get("refundComment"),
            "refundId": obj.get("refundId"),
            "refundTime": obj.get("refundTime"),
            "returnUrl": obj.get("returnUrl"),
            "status": obj.get("status"),
            "subscriptionId": obj.get("subscriptionId"),
            "userId": obj.get("userId")
        })
        return _obj


