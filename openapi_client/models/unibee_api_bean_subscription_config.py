# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server

    The version of the OpenAPI document: buildtime:202404131246 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UnibeeApiBeanSubscriptionConfig(BaseModel):
    """
    UnibeeApiBeanSubscriptionConfig
    """ # noqa: E501
    downgrade_effect_immediately: Optional[StrictBool] = Field(default=None, description="DowngradeEffectImmediately, whether subscription update should effect immediately or at period end, default at period end", alias="downgradeEffectImmediately")
    incomplete_expire_time: Optional[StrictInt] = Field(default=None, description="IncompleteExpireTime, em.. default 1day for plan of month type", alias="incompleteExpireTime")
    invoice_email: Optional[StrictBool] = Field(default=None, description="InvoiceEmail, whether to send invoice email to user, default yes", alias="invoiceEmail")
    try_automatic_payment_before_period_end: Optional[StrictInt] = Field(default=None, description="TryAutomaticPaymentBeforePeriodEnd, default 30 min", alias="tryAutomaticPaymentBeforePeriodEnd")
    upgrade_proration: Optional[StrictBool] = Field(default=None, description="UpgradeProration, whether subscription update generation proration invoice or not, default yes", alias="upgradeProration")
    __properties: ClassVar[List[str]] = ["downgradeEffectImmediately", "incompleteExpireTime", "invoiceEmail", "tryAutomaticPaymentBeforePeriodEnd", "upgradeProration"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeApiBeanSubscriptionConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeApiBeanSubscriptionConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "downgradeEffectImmediately": obj.get("downgradeEffectImmediately"),
            "incompleteExpireTime": obj.get("incompleteExpireTime"),
            "invoiceEmail": obj.get("invoiceEmail"),
            "tryAutomaticPaymentBeforePeriodEnd": obj.get("tryAutomaticPaymentBeforePeriodEnd"),
            "upgradeProration": obj.get("upgradeProration")
        })
        return _obj


