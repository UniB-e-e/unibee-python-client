# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UnibeeApiMerchantInvoiceListReq(BaseModel):
    """
    UnibeeApiMerchantInvoiceListReq
    """ # noqa: E501
    amount_end: Optional[StrictInt] = Field(default=None, description="AmountEnd", alias="amountEnd")
    amount_start: Optional[StrictInt] = Field(default=None, description="AmountStart", alias="amountStart")
    count: Optional[StrictInt] = Field(default=None, description="Count By Page")
    currency: Optional[StrictStr] = Field(default=None, description="Currency")
    delete_include: Optional[StrictBool] = Field(default=None, description="Deleted Involved，Need Admin", alias="deleteInclude")
    first_name: Optional[StrictStr] = Field(default=None, description="FirstName", alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, description="LastName", alias="lastName")
    page: Optional[StrictInt] = Field(default=None, description="Page, Start 0")
    send_email: Optional[StrictStr] = Field(default=None, description="SendEmail Filter , Default Filter All", alias="sendEmail")
    sort_field: Optional[StrictStr] = Field(default=None, description="Filter，em. invoice_id|gmt_create|gmt_modify|period_end|total_amount，Default gmt_modify", alias="sortField")
    sort_type: Optional[StrictStr] = Field(default=None, description="Sort，asc|desc，Default desc", alias="sortType")
    status: Optional[List[StrictInt]] = Field(default=None, description="Status, 1-pending｜2-processing｜3-paid | 4-failed | 5-cancelled")
    user_id: Optional[StrictInt] = Field(default=None, description="UserId Filter, Default Filter All", alias="userId")
    __properties: ClassVar[List[str]] = ["amountEnd", "amountStart", "count", "currency", "deleteInclude", "firstName", "lastName", "page", "sendEmail", "sortField", "sortType", "status", "userId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeApiMerchantInvoiceListReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeApiMerchantInvoiceListReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amountEnd": obj.get("amountEnd"),
            "amountStart": obj.get("amountStart"),
            "count": obj.get("count"),
            "currency": obj.get("currency"),
            "deleteInclude": obj.get("deleteInclude"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "page": obj.get("page"),
            "sendEmail": obj.get("sendEmail"),
            "sortField": obj.get("sortField"),
            "sortType": obj.get("sortType"),
            "status": obj.get("status"),
            "userId": obj.get("userId")
        })
        return _obj


