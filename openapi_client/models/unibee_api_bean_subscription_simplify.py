# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UnibeeApiBeanSubscriptionSimplify(BaseModel):
    """
    UnibeeApiBeanSubscriptionSimplify
    """ # noqa: E501
    addon_data: Optional[StrictStr] = Field(default=None, description="plan addon json data", alias="addonData")
    amount: Optional[StrictInt] = Field(default=None, description="amount, cent")
    billing_cycle_anchor: Optional[StrictInt] = Field(default=None, description="billing_cycle_anchor", alias="billingCycleAnchor")
    cancel_at_period_end: Optional[StrictInt] = Field(default=None, description="whether cancel at period end，0-false | 1-true", alias="cancelAtPeriodEnd")
    cancel_reason: Optional[StrictStr] = Field(default=None, alias="cancelReason")
    country_code: Optional[StrictStr] = Field(default=None, alias="countryCode")
    create_time: Optional[StrictInt] = Field(default=None, description="create utc time", alias="createTime")
    currency: Optional[StrictStr] = Field(default=None, description="currency")
    current_period_end: Optional[StrictInt] = Field(default=None, description="current_period_end, utc time", alias="currentPeriodEnd")
    current_period_start: Optional[StrictInt] = Field(default=None, description="current_period_start, utc time", alias="currentPeriodStart")
    dunning_time: Optional[StrictInt] = Field(default=None, description="dunning_time, utc time", alias="dunningTime")
    first_paid_time: Optional[StrictInt] = Field(default=None, description="first success payment time", alias="firstPaidTime")
    gas_payer: Optional[StrictStr] = Field(default=None, description="who pay the gas, merchant|user", alias="gasPayer")
    gateway_id: Optional[StrictInt] = Field(default=None, description="gateway_id", alias="gatewayId")
    gateway_item_data: Optional[StrictStr] = Field(default=None, description="gateway_item_data", alias="gatewayItemData")
    gateway_status: Optional[StrictStr] = Field(default=None, description="gateway status，Stripe：https://stripe.com/docs/billing/subscriptions/webhooks  Paypal：https://developer.paypal.com/docs/api/subscriptions/v1/#subscriptions_get", alias="gatewayStatus")
    id: Optional[StrictInt] = None
    last_update_time: Optional[StrictInt] = Field(default=None, alias="lastUpdateTime")
    latest_invoice_id: Optional[StrictStr] = Field(default=None, description="latest_invoice_id", alias="latestInvoiceId")
    link: Optional[StrictStr] = None
    merchant_id: Optional[StrictInt] = Field(default=None, description="merchant id", alias="merchantId")
    metadata: Optional[Dict[str, StrictStr]] = None
    pending_update_id: Optional[StrictStr] = Field(default=None, alias="pendingUpdateId")
    plan_id: Optional[StrictInt] = Field(default=None, description="plan id", alias="planId")
    quantity: Optional[StrictInt] = Field(default=None, description="quantity")
    return_url: Optional[StrictStr] = Field(default=None, alias="returnUrl")
    status: Optional[StrictInt] = Field(default=None, description="status，0-Init | 1-Create｜2-Active｜3-PendingInActive | 4-Cancel | 5-Expire | 6- Suspend| 7-Incomplete")
    subscription_id: Optional[StrictStr] = Field(default=None, description="subscription id", alias="subscriptionId")
    task_time: Optional[StrictStr] = Field(default=None, description="task_time", alias="taskTime")
    tax_scale: Optional[StrictInt] = Field(default=None, description="Tax Scale，1000 = 10%", alias="taxScale")
    test_clock: Optional[StrictInt] = Field(default=None, description="test_clock, simulator clock for subscription, if set , sub will out of cronjob controll", alias="testClock")
    trial_end: Optional[StrictInt] = Field(default=None, description="trial_end, utc time", alias="trialEnd")
    type: Optional[StrictInt] = Field(default=None, description="sub type, 0-gateway sub, 1-unibee sub")
    user_id: Optional[StrictInt] = Field(default=None, description="userId", alias="userId")
    vat_number: Optional[StrictStr] = Field(default=None, alias="vatNumber")
    __properties: ClassVar[List[str]] = ["addonData", "amount", "billingCycleAnchor", "cancelAtPeriodEnd", "cancelReason", "countryCode", "createTime", "currency", "currentPeriodEnd", "currentPeriodStart", "dunningTime", "firstPaidTime", "gasPayer", "gatewayId", "gatewayItemData", "gatewayStatus", "id", "lastUpdateTime", "latestInvoiceId", "link", "merchantId", "metadata", "pendingUpdateId", "planId", "quantity", "returnUrl", "status", "subscriptionId", "taskTime", "taxScale", "testClock", "trialEnd", "type", "userId", "vatNumber"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeApiBeanSubscriptionSimplify from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeApiBeanSubscriptionSimplify from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addonData": obj.get("addonData"),
            "amount": obj.get("amount"),
            "billingCycleAnchor": obj.get("billingCycleAnchor"),
            "cancelAtPeriodEnd": obj.get("cancelAtPeriodEnd"),
            "cancelReason": obj.get("cancelReason"),
            "countryCode": obj.get("countryCode"),
            "createTime": obj.get("createTime"),
            "currency": obj.get("currency"),
            "currentPeriodEnd": obj.get("currentPeriodEnd"),
            "currentPeriodStart": obj.get("currentPeriodStart"),
            "dunningTime": obj.get("dunningTime"),
            "firstPaidTime": obj.get("firstPaidTime"),
            "gasPayer": obj.get("gasPayer"),
            "gatewayId": obj.get("gatewayId"),
            "gatewayItemData": obj.get("gatewayItemData"),
            "gatewayStatus": obj.get("gatewayStatus"),
            "id": obj.get("id"),
            "lastUpdateTime": obj.get("lastUpdateTime"),
            "latestInvoiceId": obj.get("latestInvoiceId"),
            "link": obj.get("link"),
            "merchantId": obj.get("merchantId"),
            "metadata": obj.get("metadata"),
            "pendingUpdateId": obj.get("pendingUpdateId"),
            "planId": obj.get("planId"),
            "quantity": obj.get("quantity"),
            "returnUrl": obj.get("returnUrl"),
            "status": obj.get("status"),
            "subscriptionId": obj.get("subscriptionId"),
            "taskTime": obj.get("taskTime"),
            "taxScale": obj.get("taxScale"),
            "testClock": obj.get("testClock"),
            "trialEnd": obj.get("trialEnd"),
            "type": obj.get("type"),
            "userId": obj.get("userId"),
            "vatNumber": obj.get("vatNumber")
        })
        return _obj


