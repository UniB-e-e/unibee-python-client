# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.unibee_internal_logic_gateway_ro_merchant_metric_plan_limit_vo import UnibeeInternalLogicGatewayRoMerchantMetricPlanLimitVo
from typing import Optional, Set
from typing_extensions import Self

class UnibeeInternalLogicGatewayRoMetricLimitVo(BaseModel):
    """
    UnibeeInternalLogicGatewayRoMetricLimitVo
    """ # noqa: E501
    merchant_id: Optional[StrictInt] = Field(default=None, alias="MerchantId")
    metric_id: Optional[StrictInt] = Field(default=None, alias="MetricId")
    plan_limits: Optional[List[UnibeeInternalLogicGatewayRoMerchantMetricPlanLimitVo]] = Field(default=None, alias="PlanLimits")
    total_limit: Optional[StrictInt] = Field(default=None, alias="TotalLimit")
    user_id: Optional[StrictInt] = Field(default=None, alias="UserId")
    aggregation_property: Optional[StrictStr] = Field(default=None, description="aggregation property", alias="aggregationProperty")
    aggregation_type: Optional[StrictInt] = Field(default=None, description="0-count，1-count unique, 2-latest, 3-max, 4-sum", alias="aggregationType")
    code: Optional[StrictStr] = Field(default=None, description="code")
    metric_name: Optional[StrictStr] = Field(default=None, description="metric name", alias="metricName")
    type: Optional[StrictInt] = Field(default=None, description="1-limit_metered，2-charge_metered(come later),3-charge_recurring(come later)")
    __properties: ClassVar[List[str]] = ["MerchantId", "MetricId", "PlanLimits", "TotalLimit", "UserId", "aggregationProperty", "aggregationType", "code", "metricName", "type"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeInternalLogicGatewayRoMetricLimitVo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in plan_limits (list)
        _items = []
        if self.plan_limits:
            for _item in self.plan_limits:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PlanLimits'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeInternalLogicGatewayRoMetricLimitVo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MerchantId": obj.get("MerchantId"),
            "MetricId": obj.get("MetricId"),
            "PlanLimits": [UnibeeInternalLogicGatewayRoMerchantMetricPlanLimitVo.from_dict(_item) for _item in obj["PlanLimits"]] if obj.get("PlanLimits") is not None else None,
            "TotalLimit": obj.get("TotalLimit"),
            "UserId": obj.get("UserId"),
            "aggregationProperty": obj.get("aggregationProperty"),
            "aggregationType": obj.get("aggregationType"),
            "code": obj.get("code"),
            "metricName": obj.get("metricName"),
            "type": obj.get("type")
        })
        return _obj


