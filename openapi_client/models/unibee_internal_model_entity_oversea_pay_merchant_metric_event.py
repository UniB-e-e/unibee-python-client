# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UnibeeInternalModelEntityOverseaPayMerchantMetricEvent(BaseModel):
    """
    UnibeeInternalModelEntityOverseaPayMerchantMetricEvent
    """ # noqa: E501
    aggregation_property_data: Optional[StrictStr] = Field(default=None, description="aggregation property data (Json)", alias="aggregationPropertyData")
    aggregation_property_int: Optional[StrictInt] = Field(default=None, description="aggregation property int, use for metric of max|sum type", alias="aggregationPropertyInt")
    aggregation_property_string: Optional[StrictStr] = Field(default=None, description="aggregation property string, use for metric of count|count_unique type", alias="aggregationPropertyString")
    aggregation_property_unique_id: Optional[StrictStr] = Field(default=None, alias="aggregationPropertyUniqueId")
    create_time: Optional[StrictInt] = Field(default=None, description="create utc time", alias="createTime")
    external_event_id: Optional[StrictStr] = Field(default=None, description="external_event_id, should be unique", alias="externalEventId")
    gmt_create: Optional[StrictStr] = Field(default=None, description="create time", alias="gmtCreate")
    gmt_modify: Optional[StrictStr] = Field(default=None, description="update time", alias="gmtModify")
    id: Optional[StrictInt] = Field(default=None, description="Id")
    is_deleted: Optional[StrictInt] = Field(default=None, description="0-UnDeletedï¼Œ1-Deleted", alias="isDeleted")
    merchant_id: Optional[StrictInt] = Field(default=None, description="merchantId", alias="merchantId")
    metric_id: Optional[StrictInt] = Field(default=None, description="metric_id", alias="metricId")
    metric_limit: Optional[StrictInt] = Field(default=None, alias="metricLimit")
    subscription_ids: Optional[StrictStr] = Field(default=None, alias="subscriptionIds")
    subscription_period_end: Optional[StrictInt] = Field(default=None, description="matched subscription's current_period_end", alias="subscriptionPeriodEnd")
    subscription_period_start: Optional[StrictInt] = Field(default=None, description="matched subscription's current_period_start", alias="subscriptionPeriodStart")
    used: Optional[StrictInt] = None
    user_id: Optional[StrictInt] = Field(default=None, description="user_id", alias="userId")
    __properties: ClassVar[List[str]] = ["aggregationPropertyData", "aggregationPropertyInt", "aggregationPropertyString", "aggregationPropertyUniqueId", "createTime", "externalEventId", "gmtCreate", "gmtModify", "id", "isDeleted", "merchantId", "metricId", "metricLimit", "subscriptionIds", "subscriptionPeriodEnd", "subscriptionPeriodStart", "used", "userId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeInternalModelEntityOverseaPayMerchantMetricEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeInternalModelEntityOverseaPayMerchantMetricEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationPropertyData": obj.get("aggregationPropertyData"),
            "aggregationPropertyInt": obj.get("aggregationPropertyInt"),
            "aggregationPropertyString": obj.get("aggregationPropertyString"),
            "aggregationPropertyUniqueId": obj.get("aggregationPropertyUniqueId"),
            "createTime": obj.get("createTime"),
            "externalEventId": obj.get("externalEventId"),
            "gmtCreate": obj.get("gmtCreate"),
            "gmtModify": obj.get("gmtModify"),
            "id": obj.get("id"),
            "isDeleted": obj.get("isDeleted"),
            "merchantId": obj.get("merchantId"),
            "metricId": obj.get("metricId"),
            "metricLimit": obj.get("metricLimit"),
            "subscriptionIds": obj.get("subscriptionIds"),
            "subscriptionPeriodEnd": obj.get("subscriptionPeriodEnd"),
            "subscriptionPeriodStart": obj.get("subscriptionPeriodStart"),
            "used": obj.get("used"),
            "userId": obj.get("userId")
        })
        return _obj


