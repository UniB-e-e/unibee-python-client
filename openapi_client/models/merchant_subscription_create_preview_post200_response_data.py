# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.unibee_api_bean_gateway_simplify import UnibeeApiBeanGatewaySimplify
from openapi_client.models.unibee_api_bean_invoice_simplify import UnibeeApiBeanInvoiceSimplify
from openapi_client.models.unibee_api_bean_plan_addon_detail import UnibeeApiBeanPlanAddonDetail
from openapi_client.models.unibee_api_bean_plan_addon_param import UnibeeApiBeanPlanAddonParam
from openapi_client.models.unibee_api_bean_plan_simplify import UnibeeApiBeanPlanSimplify
from openapi_client.models.unibee_api_bean_valid_result import UnibeeApiBeanValidResult
from typing import Optional, Set
from typing_extensions import Self

class MerchantSubscriptionCreatePreviewPost200ResponseData(BaseModel):
    """
    MerchantSubscriptionCreatePreviewPost200ResponseData
    """ # noqa: E501
    addon_params: Optional[List[UnibeeApiBeanPlanAddonParam]] = Field(default=None, alias="addonParams")
    addons: Optional[List[UnibeeApiBeanPlanAddonDetail]] = None
    currency: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    gateway: Optional[UnibeeApiBeanGatewaySimplify] = None
    invoice: Optional[UnibeeApiBeanInvoiceSimplify] = None
    plan: Optional[UnibeeApiBeanPlanSimplify] = None
    quantity: Optional[StrictInt] = None
    tax_scale: Optional[StrictInt] = Field(default=None, alias="taxScale")
    total_amount: Optional[StrictInt] = Field(default=None, alias="totalAmount")
    user_id: Optional[StrictInt] = Field(default=None, alias="userId")
    vat_country_code: Optional[StrictStr] = Field(default=None, alias="vatCountryCode")
    vat_country_name: Optional[StrictStr] = Field(default=None, alias="vatCountryName")
    vat_number: Optional[StrictStr] = Field(default=None, alias="vatNumber")
    vat_number_validate: Optional[UnibeeApiBeanValidResult] = Field(default=None, alias="vatNumberValidate")
    __properties: ClassVar[List[str]] = ["addonParams", "addons", "currency", "email", "gateway", "invoice", "plan", "quantity", "taxScale", "totalAmount", "userId", "vatCountryCode", "vatCountryName", "vatNumber", "vatNumberValidate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantSubscriptionCreatePreviewPost200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addon_params (list)
        _items = []
        if self.addon_params:
            for _item in self.addon_params:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addonParams'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in addons (list)
        _items = []
        if self.addons:
            for _item in self.addons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addons'] = _items
        # override the default output from pydantic by calling `to_dict()` of gateway
        if self.gateway:
            _dict['gateway'] = self.gateway.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice
        if self.invoice:
            _dict['invoice'] = self.invoice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict['plan'] = self.plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vat_number_validate
        if self.vat_number_validate:
            _dict['vatNumberValidate'] = self.vat_number_validate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantSubscriptionCreatePreviewPost200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addonParams": [UnibeeApiBeanPlanAddonParam.from_dict(_item) for _item in obj["addonParams"]] if obj.get("addonParams") is not None else None,
            "addons": [UnibeeApiBeanPlanAddonDetail.from_dict(_item) for _item in obj["addons"]] if obj.get("addons") is not None else None,
            "currency": obj.get("currency"),
            "email": obj.get("email"),
            "gateway": UnibeeApiBeanGatewaySimplify.from_dict(obj["gateway"]) if obj.get("gateway") is not None else None,
            "invoice": UnibeeApiBeanInvoiceSimplify.from_dict(obj["invoice"]) if obj.get("invoice") is not None else None,
            "plan": UnibeeApiBeanPlanSimplify.from_dict(obj["plan"]) if obj.get("plan") is not None else None,
            "quantity": obj.get("quantity"),
            "taxScale": obj.get("taxScale"),
            "totalAmount": obj.get("totalAmount"),
            "userId": obj.get("userId"),
            "vatCountryCode": obj.get("vatCountryCode"),
            "vatCountryName": obj.get("vatCountryName"),
            "vatNumber": obj.get("vatNumber"),
            "vatNumberValidate": UnibeeApiBeanValidResult.from_dict(obj["vatNumberValidate"]) if obj.get("vatNumberValidate") is not None else None
        })
        return _obj


