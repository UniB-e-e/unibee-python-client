# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UnibeeInternalModelEntityOverseaPayUserAccount(BaseModel):
    """
    UnibeeInternalModelEntityOverseaPayUserAccount
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="address")
    avatar_url: Optional[StrictStr] = Field(default=None, description="avator url", alias="avatarUrl")
    billing_type: Optional[StrictInt] = Field(default=None, description="1-recurring,2-one-time", alias="billingType")
    birthday: Optional[StrictStr] = Field(default=None, description="brithday")
    company_name: Optional[StrictStr] = Field(default=None, description="company name", alias="companyName")
    country_code: Optional[StrictStr] = Field(default=None, description="country_code", alias="countryCode")
    country_name: Optional[StrictStr] = Field(default=None, description="country_name", alias="countryName")
    create_time: Optional[StrictInt] = Field(default=None, description="create utc time", alias="createTime")
    custom: Optional[StrictStr] = Field(default=None, description="custom")
    email: Optional[StrictStr] = Field(default=None, description="email")
    external_user_id: Optional[StrictStr] = Field(default=None, description="external_user_id", alias="externalUserId")
    facebook: Optional[StrictStr] = Field(default=None, description="facebook")
    first_name: Optional[StrictStr] = Field(default=None, description="first name", alias="firstName")
    gateway_id: Optional[StrictStr] = Field(default=None, description="gateway_id", alias="gatewayId")
    gender: Optional[StrictStr] = Field(default=None, description="gender")
    gmt_create: Optional[StrictStr] = Field(default=None, description="create time", alias="gmtCreate")
    gmt_modify: Optional[StrictStr] = Field(default=None, description="update time", alias="gmtModify")
    id: Optional[StrictInt] = Field(default=None, description="userId")
    is_deleted: Optional[StrictInt] = Field(default=None, description="0-UnDeleted，1-Deleted", alias="isDeleted")
    is_risk: Optional[StrictInt] = Field(default=None, description="is risk account (deperated)", alias="isRisk")
    is_special: Optional[StrictInt] = Field(default=None, description="is special account（0.no，1.yes）- deperated", alias="isSpecial")
    last_login_at: Optional[StrictInt] = Field(default=None, description="last login time, utc time", alias="lastLoginAt")
    last_name: Optional[StrictStr] = Field(default=None, description="last name", alias="lastName")
    linked_in: Optional[StrictStr] = Field(default=None, description="linkedin", alias="linkedIn")
    merchant_id: Optional[StrictInt] = Field(default=None, description="merchant_id", alias="merchantId")
    mobile: Optional[StrictStr] = Field(default=None, description="mobile")
    other_social_info: Optional[StrictStr] = Field(default=None, alias="otherSocialInfo")
    password: Optional[StrictStr] = Field(default=None, description="password , encrypt")
    payment_method: Optional[StrictStr] = Field(default=None, alias="paymentMethod")
    phone: Optional[StrictStr] = Field(default=None, description="phone")
    profession: Optional[StrictStr] = Field(default=None, description="profession")
    re_mark: Optional[StrictStr] = Field(default=None, description="note", alias="reMark")
    recurring_amount: Optional[StrictInt] = Field(default=None, description="total recurring amount, cent", alias="recurringAmount")
    school: Optional[StrictStr] = Field(default=None, description="school")
    status: Optional[StrictInt] = Field(default=None, description="0-Active, 2-Frozen")
    subscription_id: Optional[StrictStr] = Field(default=None, description="subscription id", alias="subscriptionId")
    subscription_name: Optional[StrictStr] = Field(default=None, description="subscription name", alias="subscriptionName")
    subscription_status: Optional[StrictInt] = Field(default=None, description="sub status，0-Init | 1-Create｜2-Active｜3-PendingInActive | 4-Cancel | 5-Expire | 6- Suspend| 7-Incomplete", alias="subscriptionStatus")
    telegram: Optional[StrictStr] = Field(default=None, description="telegram")
    tik_tok: Optional[StrictStr] = Field(default=None, description="tictok", alias="tikTok")
    time_zone: Optional[StrictStr] = Field(default=None, alias="timeZone")
    user_name: Optional[StrictStr] = Field(default=None, description="user name", alias="userName")
    v_at_number: Optional[StrictStr] = Field(default=None, description="vat number", alias="vATNumber")
    version: Optional[StrictInt] = Field(default=None, description="version")
    we_chat: Optional[StrictStr] = Field(default=None, description="wechat", alias="weChat")
    whats_app: Optional[StrictStr] = Field(default=None, description="whats app", alias="whatsAPP")
    __properties: ClassVar[List[str]] = ["address", "avatarUrl", "billingType", "birthday", "companyName", "countryCode", "countryName", "createTime", "custom", "email", "externalUserId", "facebook", "firstName", "gatewayId", "gender", "gmtCreate", "gmtModify", "id", "isDeleted", "isRisk", "isSpecial", "lastLoginAt", "lastName", "linkedIn", "merchantId", "mobile", "otherSocialInfo", "password", "paymentMethod", "phone", "profession", "reMark", "recurringAmount", "school", "status", "subscriptionId", "subscriptionName", "subscriptionStatus", "telegram", "tikTok", "timeZone", "userName", "vATNumber", "version", "weChat", "whatsAPP"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeInternalModelEntityOverseaPayUserAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeInternalModelEntityOverseaPayUserAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "avatarUrl": obj.get("avatarUrl"),
            "billingType": obj.get("billingType"),
            "birthday": obj.get("birthday"),
            "companyName": obj.get("companyName"),
            "countryCode": obj.get("countryCode"),
            "countryName": obj.get("countryName"),
            "createTime": obj.get("createTime"),
            "custom": obj.get("custom"),
            "email": obj.get("email"),
            "externalUserId": obj.get("externalUserId"),
            "facebook": obj.get("facebook"),
            "firstName": obj.get("firstName"),
            "gatewayId": obj.get("gatewayId"),
            "gender": obj.get("gender"),
            "gmtCreate": obj.get("gmtCreate"),
            "gmtModify": obj.get("gmtModify"),
            "id": obj.get("id"),
            "isDeleted": obj.get("isDeleted"),
            "isRisk": obj.get("isRisk"),
            "isSpecial": obj.get("isSpecial"),
            "lastLoginAt": obj.get("lastLoginAt"),
            "lastName": obj.get("lastName"),
            "linkedIn": obj.get("linkedIn"),
            "merchantId": obj.get("merchantId"),
            "mobile": obj.get("mobile"),
            "otherSocialInfo": obj.get("otherSocialInfo"),
            "password": obj.get("password"),
            "paymentMethod": obj.get("paymentMethod"),
            "phone": obj.get("phone"),
            "profession": obj.get("profession"),
            "reMark": obj.get("reMark"),
            "recurringAmount": obj.get("recurringAmount"),
            "school": obj.get("school"),
            "status": obj.get("status"),
            "subscriptionId": obj.get("subscriptionId"),
            "subscriptionName": obj.get("subscriptionName"),
            "subscriptionStatus": obj.get("subscriptionStatus"),
            "telegram": obj.get("telegram"),
            "tikTok": obj.get("tikTok"),
            "timeZone": obj.get("timeZone"),
            "userName": obj.get("userName"),
            "vATNumber": obj.get("vATNumber"),
            "version": obj.get("version"),
            "weChat": obj.get("weChat"),
            "whatsAPP": obj.get("whatsAPP")
        })
        return _obj


