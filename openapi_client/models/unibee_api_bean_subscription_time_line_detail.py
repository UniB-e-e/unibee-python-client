# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.unibee_api_bean_plan_addon_detail import UnibeeApiBeanPlanAddonDetail
from openapi_client.models.unibee_api_bean_plan_simplify import UnibeeApiBeanPlanSimplify
from typing import Optional, Set
from typing_extensions import Self

class UnibeeApiBeanSubscriptionTimeLineDetail(BaseModel):
    """
    UnibeeApiBeanSubscriptionTimeLineDetail
    """ # noqa: E501
    addons: Optional[List[UnibeeApiBeanPlanAddonDetail]] = Field(default=None, description="Addon")
    create_time: Optional[StrictInt] = Field(default=None, description="create utc time", alias="createTime")
    currency: Optional[StrictStr] = Field(default=None, description="currency")
    gateway_id: Optional[StrictInt] = Field(default=None, description="gateway_id", alias="gatewayId")
    invoice_id: Optional[StrictStr] = Field(default=None, description="invoice id", alias="invoiceId")
    merchant_id: Optional[StrictInt] = Field(default=None, description="merchant id", alias="merchantId")
    period_end: Optional[StrictInt] = Field(default=None, description="period_end", alias="periodEnd")
    period_end_time: Optional[StrictStr] = Field(default=None, description="period end (datatime)", alias="periodEndTime")
    period_start: Optional[StrictInt] = Field(default=None, description="period_start", alias="periodStart")
    period_start_time: Optional[StrictStr] = Field(default=None, description="period start (datetime)", alias="periodStartTime")
    plan: Optional[UnibeeApiBeanPlanSimplify] = None
    plan_id: Optional[StrictInt] = Field(default=None, description="PlanId", alias="planId")
    quantity: Optional[StrictInt] = Field(default=None, description="quantity")
    subscription_id: Optional[StrictStr] = Field(default=None, description="subscription id", alias="subscriptionId")
    unique_id: Optional[StrictStr] = Field(default=None, description="unique id", alias="uniqueId")
    user_id: Optional[StrictInt] = Field(default=None, description="userId", alias="userId")
    __properties: ClassVar[List[str]] = ["addons", "createTime", "currency", "gatewayId", "invoiceId", "merchantId", "periodEnd", "periodEndTime", "periodStart", "periodStartTime", "plan", "planId", "quantity", "subscriptionId", "uniqueId", "userId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeApiBeanSubscriptionTimeLineDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addons (list)
        _items = []
        if self.addons:
            for _item in self.addons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addons'] = _items
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict['plan'] = self.plan.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeApiBeanSubscriptionTimeLineDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addons": [UnibeeApiBeanPlanAddonDetail.from_dict(_item) for _item in obj["addons"]] if obj.get("addons") is not None else None,
            "createTime": obj.get("createTime"),
            "currency": obj.get("currency"),
            "gatewayId": obj.get("gatewayId"),
            "invoiceId": obj.get("invoiceId"),
            "merchantId": obj.get("merchantId"),
            "periodEnd": obj.get("periodEnd"),
            "periodEndTime": obj.get("periodEndTime"),
            "periodStart": obj.get("periodStart"),
            "periodStartTime": obj.get("periodStartTime"),
            "plan": UnibeeApiBeanPlanSimplify.from_dict(obj["plan"]) if obj.get("plan") is not None else None,
            "planId": obj.get("planId"),
            "quantity": obj.get("quantity"),
            "subscriptionId": obj.get("subscriptionId"),
            "uniqueId": obj.get("uniqueId"),
            "userId": obj.get("userId")
        })
        return _obj


