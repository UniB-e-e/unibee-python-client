# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.unibee_internal_logic_gateway_ro_merchant_member_simplify import UnibeeInternalLogicGatewayRoMerchantMemberSimplify
from openapi_client.models.unibee_internal_logic_gateway_ro_plan_addon_vo import UnibeeInternalLogicGatewayRoPlanAddonVo
from openapi_client.models.unibee_internal_logic_gateway_ro_plan_simplify import UnibeeInternalLogicGatewayRoPlanSimplify
from typing import Optional, Set
from typing_extensions import Self

class UnibeeInternalLogicGatewayRoSubscriptionPendingUpdateDetailVo(BaseModel):
    """
    UnibeeInternalLogicGatewayRoSubscriptionPendingUpdateDetailVo
    """ # noqa: E501
    addon_data: Optional[StrictStr] = Field(default=None, description="plan addon json data", alias="addonData")
    addons: Optional[List[UnibeeInternalLogicGatewayRoPlanAddonVo]] = Field(default=None, description="Addons")
    amount: Optional[StrictInt] = Field(default=None, description="CaptureAmount, Cent")
    currency: Optional[StrictStr] = Field(default=None, description="Currency")
    effect_immediate: Optional[StrictInt] = Field(default=None, description="EffectImmediate", alias="effectImmediate")
    effect_time: Optional[StrictInt] = Field(default=None, description="effect_immediate=0, EffectTime unit_time", alias="effectTime")
    gateway_id: Optional[StrictInt] = Field(default=None, description="Id", alias="gatewayId")
    gmt_create: Optional[StrictStr] = Field(default=None, description="GmtCreate", alias="gmtCreate")
    gmt_modify: Optional[StrictStr] = Field(default=None, description="GmtModify", alias="gmtModify")
    link: Optional[StrictStr] = Field(default=None, description="Link")
    merchant_id: Optional[StrictInt] = Field(default=None, description="MerchantId", alias="merchantId")
    merchant_member: Optional[UnibeeInternalLogicGatewayRoMerchantMemberSimplify] = Field(default=None, alias="merchantMember")
    note: Optional[StrictStr] = Field(default=None, description="Update Note")
    paid: Optional[StrictInt] = Field(default=None, description="Paid")
    plan: Optional[UnibeeInternalLogicGatewayRoPlanSimplify] = None
    plan_id: Optional[StrictInt] = Field(default=None, description="PlanId", alias="planId")
    proration_amount: Optional[StrictInt] = Field(default=None, description="ProrationAmount,Cents", alias="prorationAmount")
    quantity: Optional[StrictInt] = Field(default=None, description="quantity")
    status: Optional[StrictInt] = Field(default=None, description="Status，0-Init | 1-Create｜2-Finished｜3-Cancelled")
    subscription_id: Optional[StrictStr] = Field(default=None, description="SubscriptionId", alias="subscriptionId")
    update_addon_data: Optional[StrictStr] = Field(default=None, description="UpdateAddonData", alias="updateAddonData")
    update_addons: Optional[List[UnibeeInternalLogicGatewayRoPlanAddonVo]] = Field(default=None, description="UpdateAddons", alias="updateAddons")
    update_amount: Optional[StrictInt] = Field(default=None, description="UpdateAmount, Cents", alias="updateAmount")
    update_currency: Optional[StrictStr] = Field(default=None, description="UpdateCurrency", alias="updateCurrency")
    update_plan: Optional[UnibeeInternalLogicGatewayRoPlanSimplify] = Field(default=None, alias="updatePlan")
    update_plan_id: Optional[StrictInt] = Field(default=None, description="UpdatePlanId", alias="updatePlanId")
    update_quantity: Optional[StrictInt] = Field(default=None, description="UpdateQuantity", alias="updateQuantity")
    update_subscription_id: Optional[StrictStr] = Field(default=None, description="UpdateSubscriptionId", alias="updateSubscriptionId")
    user_id: Optional[StrictInt] = Field(default=None, description="UserId", alias="userId")
    __properties: ClassVar[List[str]] = ["addonData", "addons", "amount", "currency", "effectImmediate", "effectTime", "gatewayId", "gmtCreate", "gmtModify", "link", "merchantId", "merchantMember", "note", "paid", "plan", "planId", "prorationAmount", "quantity", "status", "subscriptionId", "updateAddonData", "updateAddons", "updateAmount", "updateCurrency", "updatePlan", "updatePlanId", "updateQuantity", "updateSubscriptionId", "userId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeInternalLogicGatewayRoSubscriptionPendingUpdateDetailVo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addons (list)
        _items = []
        if self.addons:
            for _item in self.addons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addons'] = _items
        # override the default output from pydantic by calling `to_dict()` of merchant_member
        if self.merchant_member:
            _dict['merchantMember'] = self.merchant_member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict['plan'] = self.plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in update_addons (list)
        _items = []
        if self.update_addons:
            for _item in self.update_addons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['updateAddons'] = _items
        # override the default output from pydantic by calling `to_dict()` of update_plan
        if self.update_plan:
            _dict['updatePlan'] = self.update_plan.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeInternalLogicGatewayRoSubscriptionPendingUpdateDetailVo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addonData": obj.get("addonData"),
            "addons": [UnibeeInternalLogicGatewayRoPlanAddonVo.from_dict(_item) for _item in obj["addons"]] if obj.get("addons") is not None else None,
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "effectImmediate": obj.get("effectImmediate"),
            "effectTime": obj.get("effectTime"),
            "gatewayId": obj.get("gatewayId"),
            "gmtCreate": obj.get("gmtCreate"),
            "gmtModify": obj.get("gmtModify"),
            "link": obj.get("link"),
            "merchantId": obj.get("merchantId"),
            "merchantMember": UnibeeInternalLogicGatewayRoMerchantMemberSimplify.from_dict(obj["merchantMember"]) if obj.get("merchantMember") is not None else None,
            "note": obj.get("note"),
            "paid": obj.get("paid"),
            "plan": UnibeeInternalLogicGatewayRoPlanSimplify.from_dict(obj["plan"]) if obj.get("plan") is not None else None,
            "planId": obj.get("planId"),
            "prorationAmount": obj.get("prorationAmount"),
            "quantity": obj.get("quantity"),
            "status": obj.get("status"),
            "subscriptionId": obj.get("subscriptionId"),
            "updateAddonData": obj.get("updateAddonData"),
            "updateAddons": [UnibeeInternalLogicGatewayRoPlanAddonVo.from_dict(_item) for _item in obj["updateAddons"]] if obj.get("updateAddons") is not None else None,
            "updateAmount": obj.get("updateAmount"),
            "updateCurrency": obj.get("updateCurrency"),
            "updatePlan": UnibeeInternalLogicGatewayRoPlanSimplify.from_dict(obj["updatePlan"]) if obj.get("updatePlan") is not None else None,
            "updatePlanId": obj.get("updatePlanId"),
            "updateQuantity": obj.get("updateQuantity"),
            "updateSubscriptionId": obj.get("updateSubscriptionId"),
            "userId": obj.get("userId")
        })
        return _obj


