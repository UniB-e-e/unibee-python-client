# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UnibeeInternalModelEntityOverseaPayMerchant(BaseModel):
    """
    UnibeeInternalModelEntityOverseaPayMerchant
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="address")
    api_key: Optional[StrictStr] = Field(default=None, description="merchant open api key", alias="apiKey")
    business_num: Optional[StrictStr] = Field(default=None, description="business_num", alias="businessNum")
    company_id: Optional[StrictInt] = Field(default=None, description="company_id", alias="companyId")
    company_logo: Optional[StrictStr] = Field(default=None, description="company_logo", alias="companyLogo")
    company_name: Optional[StrictStr] = Field(default=None, description="company_name", alias="companyName")
    create_time: Optional[StrictInt] = Field(default=None, description="create utc time", alias="createTime")
    email: Optional[StrictStr] = Field(default=None, description="email")
    gmt_create: Optional[StrictStr] = Field(default=None, description="create time", alias="gmtCreate")
    gmt_modify: Optional[StrictStr] = Field(default=None, description="update_time", alias="gmtModify")
    home_url: Optional[StrictStr] = Field(default=None, alias="homeUrl")
    host: Optional[StrictStr] = Field(default=None, description="merchant user portal host")
    id: Optional[StrictInt] = Field(default=None, description="merchant_id")
    idcard: Optional[StrictStr] = Field(default=None, description="idcard")
    is_deleted: Optional[StrictInt] = Field(default=None, description="0-UnDeletedï¼Œ1-Deleted", alias="isDeleted")
    location: Optional[StrictStr] = Field(default=None, description="location")
    name: Optional[StrictStr] = Field(default=None, description="name")
    phone: Optional[StrictStr] = Field(default=None, description="phone")
    time_zone: Optional[StrictStr] = Field(default=None, description="merchant default time zone", alias="timeZone")
    type: Optional[StrictInt] = Field(default=None, description="type")
    user_id: Optional[StrictInt] = Field(default=None, description="create_user_id", alias="userId")
    __properties: ClassVar[List[str]] = ["address", "apiKey", "businessNum", "companyId", "companyLogo", "companyName", "createTime", "email", "gmtCreate", "gmtModify", "homeUrl", "host", "id", "idcard", "isDeleted", "location", "name", "phone", "timeZone", "type", "userId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeInternalModelEntityOverseaPayMerchant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeInternalModelEntityOverseaPayMerchant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "apiKey": obj.get("apiKey"),
            "businessNum": obj.get("businessNum"),
            "companyId": obj.get("companyId"),
            "companyLogo": obj.get("companyLogo"),
            "companyName": obj.get("companyName"),
            "createTime": obj.get("createTime"),
            "email": obj.get("email"),
            "gmtCreate": obj.get("gmtCreate"),
            "gmtModify": obj.get("gmtModify"),
            "homeUrl": obj.get("homeUrl"),
            "host": obj.get("host"),
            "id": obj.get("id"),
            "idcard": obj.get("idcard"),
            "isDeleted": obj.get("isDeleted"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "phone": obj.get("phone"),
            "timeZone": obj.get("timeZone"),
            "type": obj.get("type"),
            "userId": obj.get("userId")
        })
        return _obj


