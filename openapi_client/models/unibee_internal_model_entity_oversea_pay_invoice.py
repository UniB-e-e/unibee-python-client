# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UnibeeInternalModelEntityOverseaPayInvoice(BaseModel):
    """
    UnibeeInternalModelEntityOverseaPayInvoice
    """ # noqa: E501
    biz_type: Optional[StrictInt] = Field(default=None, description="biz type from payment 1-single payment, 3-subscription", alias="bizType")
    create_time: Optional[StrictInt] = Field(default=None, description="create utc time", alias="createTime")
    currency: Optional[StrictStr] = Field(default=None, description="currency")
    data: Optional[StrictStr] = Field(default=None, description="data (json)")
    gateway_id: Optional[StrictInt] = Field(default=None, description="gateway_id", alias="gatewayId")
    gateway_invoice_id: Optional[StrictStr] = Field(default=None, alias="gatewayInvoiceId")
    gateway_invoice_pdf: Optional[StrictStr] = Field(default=None, alias="gatewayInvoicePdf")
    gateway_payment_id: Optional[StrictStr] = Field(default=None, alias="gatewayPaymentId")
    gateway_status: Optional[StrictStr] = Field(default=None, alias="gatewayStatus")
    gmt_create: Optional[StrictStr] = Field(default=None, description="create time", alias="gmtCreate")
    gmt_modify: Optional[StrictStr] = Field(default=None, description="update time", alias="gmtModify")
    id: Optional[StrictInt] = None
    invoice_id: Optional[StrictStr] = Field(default=None, description="invoice_id", alias="invoiceId")
    invoice_name: Optional[StrictStr] = Field(default=None, description="invoice name", alias="invoiceName")
    is_deleted: Optional[StrictInt] = Field(default=None, description="0-UnDeleted，1-Deleted", alias="isDeleted")
    lines: Optional[StrictStr] = Field(default=None, description="lines( json)")
    link: Optional[StrictStr] = Field(default=None, description="invoice link")
    merchant_id: Optional[StrictInt] = Field(default=None, description="merchant_id", alias="merchantId")
    payment_id: Optional[StrictStr] = Field(default=None, description="paymentId", alias="paymentId")
    payment_link: Optional[StrictStr] = Field(default=None, description="invoice payment link", alias="paymentLink")
    period_end: Optional[StrictInt] = Field(default=None, description="period_end utc time", alias="periodEnd")
    period_end_time: Optional[StrictStr] = Field(default=None, alias="periodEndTime")
    period_start: Optional[StrictInt] = Field(default=None, description="period_start, utc time", alias="periodStart")
    period_start_time: Optional[StrictStr] = Field(default=None, alias="periodStartTime")
    refund_id: Optional[StrictStr] = Field(default=None, description="refundId", alias="refundId")
    send_email: Optional[StrictStr] = Field(default=None, description="email", alias="sendEmail")
    send_note: Optional[StrictStr] = Field(default=None, description="send_note", alias="sendNote")
    send_pdf: Optional[StrictStr] = Field(default=None, description="pdf link", alias="sendPdf")
    send_status: Optional[StrictInt] = Field(default=None, description="email send status，0-No | 1- YES", alias="sendStatus")
    send_terms: Optional[StrictStr] = Field(default=None, description="send_terms", alias="sendTerms")
    status: Optional[StrictInt] = Field(default=None, description="status，0-Init | 1-pending｜2-processing｜3-paid | 4-failed | 5-cancelled")
    subscription_amount: Optional[StrictInt] = Field(default=None, description="sub amount,cent", alias="subscriptionAmount")
    subscription_amount_excluding_tax: Optional[StrictInt] = Field(default=None, alias="subscriptionAmountExcludingTax")
    subscription_id: Optional[StrictStr] = Field(default=None, description="subscription_id", alias="subscriptionId")
    tax_amount: Optional[StrictInt] = Field(default=None, description="tax amount,cent", alias="taxAmount")
    tax_scale: Optional[StrictInt] = Field(default=None, description="Tax scale，1000 = 10%", alias="taxScale")
    total_amount: Optional[StrictInt] = Field(default=None, description="total amount, cent", alias="totalAmount")
    total_amount_excluding_tax: Optional[StrictInt] = Field(default=None, alias="totalAmountExcludingTax")
    unique_id: Optional[StrictStr] = Field(default=None, description="unique_id", alias="uniqueId")
    user_id: Optional[StrictInt] = Field(default=None, description="userId", alias="userId")
    __properties: ClassVar[List[str]] = ["bizType", "createTime", "currency", "data", "gatewayId", "gatewayInvoiceId", "gatewayInvoicePdf", "gatewayPaymentId", "gatewayStatus", "gmtCreate", "gmtModify", "id", "invoiceId", "invoiceName", "isDeleted", "lines", "link", "merchantId", "paymentId", "paymentLink", "periodEnd", "periodEndTime", "periodStart", "periodStartTime", "refundId", "sendEmail", "sendNote", "sendPdf", "sendStatus", "sendTerms", "status", "subscriptionAmount", "subscriptionAmountExcludingTax", "subscriptionId", "taxAmount", "taxScale", "totalAmount", "totalAmountExcludingTax", "uniqueId", "userId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeInternalModelEntityOverseaPayInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeInternalModelEntityOverseaPayInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bizType": obj.get("bizType"),
            "createTime": obj.get("createTime"),
            "currency": obj.get("currency"),
            "data": obj.get("data"),
            "gatewayId": obj.get("gatewayId"),
            "gatewayInvoiceId": obj.get("gatewayInvoiceId"),
            "gatewayInvoicePdf": obj.get("gatewayInvoicePdf"),
            "gatewayPaymentId": obj.get("gatewayPaymentId"),
            "gatewayStatus": obj.get("gatewayStatus"),
            "gmtCreate": obj.get("gmtCreate"),
            "gmtModify": obj.get("gmtModify"),
            "id": obj.get("id"),
            "invoiceId": obj.get("invoiceId"),
            "invoiceName": obj.get("invoiceName"),
            "isDeleted": obj.get("isDeleted"),
            "lines": obj.get("lines"),
            "link": obj.get("link"),
            "merchantId": obj.get("merchantId"),
            "paymentId": obj.get("paymentId"),
            "paymentLink": obj.get("paymentLink"),
            "periodEnd": obj.get("periodEnd"),
            "periodEndTime": obj.get("periodEndTime"),
            "periodStart": obj.get("periodStart"),
            "periodStartTime": obj.get("periodStartTime"),
            "refundId": obj.get("refundId"),
            "sendEmail": obj.get("sendEmail"),
            "sendNote": obj.get("sendNote"),
            "sendPdf": obj.get("sendPdf"),
            "sendStatus": obj.get("sendStatus"),
            "sendTerms": obj.get("sendTerms"),
            "status": obj.get("status"),
            "subscriptionAmount": obj.get("subscriptionAmount"),
            "subscriptionAmountExcludingTax": obj.get("subscriptionAmountExcludingTax"),
            "subscriptionId": obj.get("subscriptionId"),
            "taxAmount": obj.get("taxAmount"),
            "taxScale": obj.get("taxScale"),
            "totalAmount": obj.get("totalAmount"),
            "totalAmountExcludingTax": obj.get("totalAmountExcludingTax"),
            "uniqueId": obj.get("uniqueId"),
            "userId": obj.get("userId")
        })
        return _obj


