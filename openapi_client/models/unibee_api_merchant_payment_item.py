# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server, For this sample, you can use the api key `EUXAgwv3Vcr1PFWt2SgBumMHXn3ImBqM` to test the authorization filters

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UnibeeApiMerchantPaymentItem(BaseModel):
    """
    UnibeeApiMerchantPaymentItem
    """ # noqa: E501
    amount: StrictInt = Field(description="item total amount, sum(item.amount) should equal to totalAmount, cent")
    amount_excluding_tax: Optional[StrictInt] = Field(default=None, description="amountExcludingTax = unitAmountExcludingTax * quantity", alias="amountExcludingTax")
    currency: Optional[StrictStr] = None
    description: StrictStr = Field(description="item description ")
    quantity: Optional[StrictInt] = None
    tax: Optional[StrictInt] = Field(default=None, description="tax = amount - amountExcludingTax")
    tax_scale: Optional[StrictInt] = Field(default=None, description="Tax Scaleï¼Œ1000 = 10%", alias="taxScale")
    unit_amount_excluding_tax: Optional[StrictInt] = Field(default=None, alias="unitAmountExcludingTax")
    __properties: ClassVar[List[str]] = ["amount", "amountExcludingTax", "currency", "description", "quantity", "tax", "taxScale", "unitAmountExcludingTax"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeApiMerchantPaymentItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeApiMerchantPaymentItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "amountExcludingTax": obj.get("amountExcludingTax"),
            "currency": obj.get("currency"),
            "description": obj.get("description"),
            "quantity": obj.get("quantity"),
            "tax": obj.get("tax"),
            "taxScale": obj.get("taxScale"),
            "unitAmountExcludingTax": obj.get("unitAmountExcludingTax")
        })
        return _obj


