# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server

    The version of the OpenAPI document: buildtime:202404131246 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.unibee_api_bean_plan_addon_param import UnibeeApiBeanPlanAddonParam
from typing import Optional, Set
from typing_extensions import Self

class UnibeeApiMerchantSubscriptionUpdatePreviewReq(BaseModel):
    """
    UnibeeApiMerchantSubscriptionUpdatePreviewReq
    """ # noqa: E501
    addon_params: Optional[List[UnibeeApiBeanPlanAddonParam]] = Field(default=None, description="addonParams", alias="addonParams")
    discount_code: Optional[StrictStr] = Field(default=None, description="DiscountCode", alias="discountCode")
    effect_immediate: Optional[StrictInt] = Field(default=None, description="Effect Immediate，1-Immediate，2-Next Period", alias="effectImmediate")
    gateway_id: Optional[StrictInt] = Field(default=None, description="Id", alias="gatewayId")
    new_plan_id: StrictInt = Field(description="New PlanId", alias="newPlanId")
    quantity: Optional[StrictInt] = Field(default=None, description="Quantity，Default 1")
    subscription_id: StrictStr = Field(description="SubscriptionId", alias="subscriptionId")
    __properties: ClassVar[List[str]] = ["addonParams", "discountCode", "effectImmediate", "gatewayId", "newPlanId", "quantity", "subscriptionId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeApiMerchantSubscriptionUpdatePreviewReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addon_params (list)
        _items = []
        if self.addon_params:
            for _item in self.addon_params:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addonParams'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeApiMerchantSubscriptionUpdatePreviewReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addonParams": [UnibeeApiBeanPlanAddonParam.from_dict(_item) for _item in obj["addonParams"]] if obj.get("addonParams") is not None else None,
            "discountCode": obj.get("discountCode"),
            "effectImmediate": obj.get("effectImmediate"),
            "gatewayId": obj.get("gatewayId"),
            "newPlanId": obj.get("newPlanId"),
            "quantity": obj.get("quantity"),
            "subscriptionId": obj.get("subscriptionId")
        })
        return _obj


