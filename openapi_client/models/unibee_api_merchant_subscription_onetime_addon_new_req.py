# coding: utf-8

"""
    OpenAPI UniBee

    This is UniBee api server

    The version of the OpenAPI document: buildtime:202404131246 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UnibeeApiMerchantSubscriptionOnetimeAddonNewReq(BaseModel):
    """
    UnibeeApiMerchantSubscriptionOnetimeAddonNewReq
    """ # noqa: E501
    addon_id: StrictInt = Field(description="AddonId, id of one-time addon, the new payment will created base on the addon's amount'", alias="addonId")
    discount_code: Optional[StrictStr] = Field(default=None, description="DiscountCode", alias="discountCode")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Metadataï¼Œcustom data")
    quantity: StrictInt = Field(description="Quantity, quantity of the new payment which one-time addon purchased")
    return_url: Optional[StrictStr] = Field(default=None, description="ReturnUrl, the addon's payment will redirect based on the returnUrl provided when it's back from gateway side", alias="returnUrl")
    subscription_id: StrictStr = Field(description="SubscriptionId, id of subscription which addon will attached", alias="subscriptionId")
    __properties: ClassVar[List[str]] = ["addonId", "discountCode", "metadata", "quantity", "returnUrl", "subscriptionId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeApiMerchantSubscriptionOnetimeAddonNewReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeApiMerchantSubscriptionOnetimeAddonNewReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addonId": obj.get("addonId"),
            "discountCode": obj.get("discountCode"),
            "metadata": obj.get("metadata"),
            "quantity": obj.get("quantity"),
            "returnUrl": obj.get("returnUrl"),
            "subscriptionId": obj.get("subscriptionId")
        })
        return _obj


